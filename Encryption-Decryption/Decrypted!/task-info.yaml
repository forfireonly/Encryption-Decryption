type: edu
custom_name: stage3
files:
- name: test/EncryptDecryptTest.java
  visible: false
  text: |
    import encryptdecrypt.Main;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.SimpleTestCase;

    import java.util.List;

    public class EncryptDecryptTest extends StageTest {
        public EncryptDecryptTest() throws Exception {
            super(Main.class);
        }

        @Override
        public List<SimpleTestCase> generate() {
            return List.of(
                new SimpleTestCase(
                    "enc\n" +
                        "Welcome to hyperskill!\n" +
                        "5",
                    "\\jqhtrj%yt%m~ujwxpnqq&"),
                new SimpleTestCase(
                    "enc\n" +
                        "Hello\n" +
                        "0",
                    "Hello"),
                new SimpleTestCase(
                    "enc\n" +
                        "012345678\n" +
                        "1",
                    "123456789"),
                new SimpleTestCase(
                    "dec\n" +
                        "\\jqhtrj%yt%m~ujwxpnqq&\n" +
                        "5",
                    "Welcome to hyperskill!"),
                new SimpleTestCase(
                    "dec\n" +
                        "Hello\n" +
                        "0",
                    "Hello"),
                new SimpleTestCase(
                    "dec\n" +
                        "222233334444\n" +
                        "1",
                    "111122223333")
            );
        }
    }
  learner_created: false
- name: src/encryptdecrypt/Main.java
  visible: true
  text: |
    package encryptdecrypt;

    import java.util.Arrays;
    import java.util.Collections;
    import java.util.Scanner;

    public class Main {
        static char[] alphabet = {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m',
                'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'};
        public static void encoding(String message, int key) {

            char[] messageArray = message.toCharArray();
            StringBuilder incryptedMessage = new StringBuilder();
            int indexOfChar = -1;
            for (char each : messageArray) {
                if (each == ' ') {
                    incryptedMessage.append(' ');
                }
                if (each == '!') {
                    incryptedMessage.append('!');
                } else {

                    for (int i = 0; i < alphabet.length; i++) {
                        if (alphabet[i] == each) {
                            if (i + key >= alphabet.length) {
                                incryptedMessage.append(alphabet[key+ i -alphabet.length]);
                            } else {
                                incryptedMessage.append(alphabet[i + key]);
                            }
                        }

                    }
                }
            }
            System.out.println(incryptedMessage);

        }
        public static void main(String[] args) {

            char[] alphabet = {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m',
                    'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'};
            char[] reverseAlphabet = new char[alphabet.length];
            for (int i = 0; i < alphabet.length; i++) {
                reverseAlphabet[i] = alphabet[alphabet.length - 1 - i];
            }

            Scanner scn = new Scanner(System.in);
           // String operation = scn.nextLine();
            String message = scn.nextLine();
            int key = Integer.parseInt(scn.nextLine());
            encoding(message, key);
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/46/stages/247/implement
status: Solved
record: 3
